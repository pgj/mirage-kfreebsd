#########################################################################
#                                                                       #
#                            Objective Caml                             #
#                                                                       #
#            Xavier Leroy, projet Cristal, INRIA Rocquencourt           #
#                                                                       #
#   Copyright 1999 Institut National de Recherche en Informatique et    #
#   en Automatique.  All rights reserved.  This file is distributed     #
#   under the terms of the GNU Library General Public License, with     #
#   the special exception on linking described in file ../LICENSE.      #
#                                                                       #
#########################################################################

# $Id: Makefile.shared 10448 2010-05-21 11:28:21Z doligez $

# ./configure
BINDIR=$(PREFIX)/bin
LIBDIR=$(PREFIX)/lib/ocaml
STUBLIBDIR=$(LIBDIR)/stublibs
MANDIR=$(PREFIX)/man
MANEXT=1
RANLIB=ranlib
RANLIBCMD=ranlib
SHARPBANGSCRIPTS=true
BNG_ARCH=amd64
BNG_ASM_LEVEL=1
PTHREAD_LINK=-cclib -pthread
X11_INCLUDES=-I$(PREFIX)/include
X11_LINK=-L$(PREFIX)/lib -lX11
DBM_INCLUDES=
DBM_LINK=
TK_DEFS=-I$(PREFIX)/include/tcl8.5 -I$(PREFIX)/include/tk8.5  $(X11_INCLUDES)
TK_LINK=-L$(PREFIX)/lib -ltk85-threads  -ltcl85-threads -pthread  $(X11_LINK)
LIBBFD_LINK=
BYTECC=cc
BYTECCCOMPOPTS= -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D_THREAD_SAFE -O -pipe 
BYTECCLINKOPTS= -Wl,-E
BYTECCLIBS= -lm  -lcurses -pthread
BYTECCRPATH=-Wl,-rpath,
EXE=
SUPPORTS_SHARED_LIBRARIES=false
SHAREDCCCOMPOPTS=
MKSHAREDLIBRPATH=-Wl,-rpath,
NATDYNLINKOPTS=-Wl,-E
SYSLIB=-l$(1)
#ml let syslib x = "-l"^x;;

### How to build a static library
MKLIB=ar rc $(1) $(2); ranlib $(1)
#ml let mklib out files opts = Printf.sprintf "ar rc %s %s %s; ranlib %s" out opts files out;;
ARCH=amd64
MODEL=default
SYSTEM=freebsd
NATIVECC=cc
NATIVECCCOMPOPTS= -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D_THREAD_SAFE -O -pipe 
NATIVECCPROFOPTS= -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D_THREAD_SAFE
NATIVECCLINKOPTS=
NATIVECCRPATH=-Wl,-rpath,
NATIVECCLIBS= -lm 
ASM=as
ASPP=cc -c
ASPPPROFFLAGS=-DPROFILING
PROFILING=prof
DYNLINKOPTS=
OTHERLIBRARIES=unix str num dynlink bigarray systhreads threads graph dbm labltk
DEBUGGER=ocamldebugger
CC_PROFILE=-pg
SYSTHREAD_SUPPORT=true
PARTIALLD=ld -r
PACKLD=$(PARTIALLD) $(NATIVECCLINKOPTS) -o\ 
DLLCCCOMPOPTS=
IFLEXDIR=
O=o
A=a
SO=so
EXT_OBJ=.o
EXT_ASM=.s
EXT_LIB=.a
EXT_DLL=.so
EXTRALIBS=
CCOMPTYPE=cc
TOOLCHAIN=cc
NATDYNLINK=true
CMXS=cmxs
MKEXE=$(BYTECC)
MKDLL=cc  -shared
MKMAINDLL=cc  -shared
# ./configure

RUNTIME=ocamlrun
COMPILER=ocamlc
CAMLC=$(COMPILER)
COMPFLAGS=-strict-sequence -g -warn-error A -nostdlib
OPTCOMPILER=ocamlopt
CAMLOPT=$(OPTCOMPILER)
OPTCOMPFLAGS=-warn-error A -nostdlib -g -nodynlink -fno-PIC
CAMLDEP=ocamldep

OBJS=pervasives.cmo $(OTHERS)
OTHERS=array.cmo list.cmo char.cmo string.cmo sys.cmo \
  hashtbl.cmo sort.cmo marshal.cmo obj.cmo \
  int32.cmo int64.cmo nativeint.cmo \
  lexing.cmo parsing.cmo \
  set.cmo map.cmo stack.cmo queue.cmo \
  camlinternalLazy.cmo lazy.cmo stream.cmo \
  buffer.cmo printf.cmo format.cmo scanf.cmo \
  arg.cmo printexc.cmo gc.cmo \
  digest.cmo random.cmo callback.cmo \
  camlinternalOO.cmo oo.cmo camlinternalMod.cmo \
  genlex.cmo weak.cmo \
  filename.cmo \
  arrayLabels.cmo listLabels.cmo stringLabels.cmo moreLabels.cmo stdLabels.cmo

all: stdlib.cma std_exit.cmo camlheader camlheader_ur

install:
	cp stdlib.cma std_exit.cmo *.cmi *.mli *.ml camlheader camlheader_ur $(LIBDIR)

stdlib.cma: $(OBJS)
	$(CAMLC) -a -o stdlib.cma $(OBJS)

stdlib.cmxa: $(OBJS:.cmo=.cmx)
	$(CAMLOPT) -a -o stdlib.cmxa $(OBJS:.cmo=.cmx)

sys.ml: sys.mlp VERSION
	sed -e "s|%%VERSION%%|`sed -e 1q VERSION`|" sys.mlp >sys.ml

clean::
	rm -f sys.ml

clean::
	rm -f camlheader camlheader_ur

.SUFFIXES: .mli .ml .cmi .cmo .cmx .p.cmx

.mli.cmi:
	$(CAMLC) $(COMPFLAGS) `./Compflags $@` -c $<

.ml.cmo:
	$(CAMLC) $(COMPFLAGS) `./Compflags $@` -c $<

.ml.cmx:
	$(CAMLOPT) $(OPTCOMPFLAGS) `./Compflags $@` -c $<

.ml.p.cmx:
	$(CAMLOPT) $(OPTCOMPFLAGS) `./Compflags $@` -p -c -o $*.p.cmx $<

# Dependencies on Pervasives (not tracked by ocamldep)
$(OBJS) std_exit.cmo: pervasives.cmi
$(OTHERS:.cmo=.cmi) std_exit.cmi: pervasives.cmi
$(OBJS:.cmo=.cmx) std_exit.cmx: pervasives.cmi
$(OBJS:.cmo=.p.cmx) std_exit.p.cmx: pervasives.cmi
$(OTHERS:.cmo=.cmx) std_exit.cmx: pervasives.cmx
$(OTHERS:.cmo=.p.cmx) std_exit.p.cmx: pervasives.cmx

clean::
	rm -f *.cm* *.$(O) *.$(A)
	rm -f *~

include .depend

depend:
	$(CAMLDEP) *.mli *.ml > .depend
	$(CAMLDEP) *.ml | sed -e 's/\.cmx/.p.cmx/g' >>.depend
